Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 코틀린의 기본 요소: 함수와 변수\n\n## 1. 코틀린 함수 소개\n코틀린에서 함수는 'fun' 키워드로 시작한다. 함수 선언 시 주요 특징은 다음과 같다.\n- 반환 타입을 생략할 수 있다.\n- 함수를 클래스 외부에 정의할 수 있다.\n- 매개변수 이름 뒤에 타입을 지정한다.\n\n## 2. 코틀린 변수 이해하기\n코틀린에서 변수는 'val'과 'var'로 선언한다.\n- 'val': 불변(immutable) 변수\n- 'var': 가변(mutable) 변수\n\n## 3. 코틀린의 특별한 기능\n- 타입 추론: 변수와 함수의 반환 타입을 자동으로 추론한다.\n- 문자열 템플릿: 문자열 내에 변수나 표현식을 쉽게 삽입할 수 있다.\n\n---\n# 코틀린의 클래스와 객체\n\n코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.\n\n## 1. 클래스 정의의 간소화\n- 코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.\n\n## 2. 프로퍼티 접근자\n- 코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.\n\n## 3. 패키지와 임포트\n- 코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.\n\n## 4. 파일 구조의 유연성\n- 코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.\n- 이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다.\n\n---\n# 코틀린의 제어 구조와 표현식 처리\n\n코틀린은 강력한 제어 구조와 표현식 처리 기능을 제공한다. 특히 'when'과 'enum'은 매우 유용한 기능이다.\n\n## enum 클래스\n\nenum 클래스는 상수 집합을 정의하는 데 사용한다. 코틀린의 enum은 자바와 유사하지만 더 많은 기능을 제공한다.\n\n## when 표현식\n\nwhen은 코틀린의 강력한 제어 구조로, 자바의 switch문을 대체하고 확장한다.\n\nwhen은 enum 클래스뿐만 아니라 다양한 타입과 조건에 사용할 수 있다.\n\n## 스마트 캐스트\n\n코틀린의 스마트 캐스트 기능은 타입 검사와 캐스팅을 자동으로 수행한다.\n\n이러한 기능들을 통해 코틀린은 더 간결하고 안전한 코드 작성을 가능하게 한다.\n\n---\n# 코틀린의 반복문\n\n코틀린의 반복문은 Java와 유사한 구조를 가진다. 특히 while 문은 거의 동일한 형태를 보인다. 코틀린에서는 주로 while, do-while, 그리고 for 문을 사용하여 반복 작업을 수행한다.\n\n## while과 do-while 반복문\n\nwhile과 do-while 문의 기본 구조는 다음과 같다:\n\n```kotlin\nwhile (조건) {\n    // 코드 블록\n}\n\ndo {\n    // 코드 블록\n} while (조건)\n```\n\n## for 반복문\n\n코틀린의 for 문은 범위(range)를 사용하여 반복을 수행한다. 다음은 for 문의 예시이다:\n\n```kotlin\nfun main() {\n    // 1부터 100까지 반복\n    for (i in 1..100) {\n        println(if (i % 2 == 0) \"짝수\" else \"홀수\")\n    }\n\n    // 100부터 1까지 3씩 감소하며 반복\n    for (i in 100 downTo 1 step 3) {\n        println(if (i % 2 == 0) \"짝수\" else \"홀수\")\n    }\n}\n```\n\n기본적으로 'i in 1..100'은 양쪽 끝을 포함한다. 마지막 숫자를 제외하려면 'until' 키워드를 사용할 수 있다.\n\n## 컬렉션과 맵의 반복\n\n코틀린에서는 컬렉션과 맵을 쉽게 순회할 수 있다. 다음은 맵을 사용한 예시이다:\n\n```kotlin\nval students = mutableMapOf(1 to \"Alice\", 2 to \"Bob\", 3 to \"Charlie\")\n\nfor ((num, name) in students) {\n    println(\"번호: $num, 이름: $name\")\n}\n```\n\n여기서 '(num, name) in students'는 맵의 키-값 쌍을 분해하여 각각의 변수에 할당하는 구조 분해 선언을 사용한다.\n\n## 범위 검사\n\n코틀린에서는 'in' 키워드를 사용하여 값이 특정 범위 내에 있는지 쉽게 확인할 수 있다:\n\n```kotlin\nfun isLetter(c: Char) = c in 'a'..'z' || c in 'A'..'Z'\nfun isDigit(c: Char) = c in '0'..'9'\n\nfun recognize(c: Char) = when(c) {\n    in '0'..'9' -> \"숫자\"\n    in 'a'..'z', in 'A'..'Z' -> \"알파벳\"\n    else -> \"기타 문자\"\n}\n```\n\n이러한 범위 검사는 내부적으로 'a ≤ x ≤ b'와 같은 비교 연산으로 변환된다.\n\n---\n# 코틀린의 예외 처리\n코틀린의 예외 처리는 자바와 유사하지만, 중요한 차이점이 있다.\n\n## 기본적인 예외 발생\n코틀린에서는 자바와 달리 'new' 키워드 없이 예외를 생성할 수 있다.\n\n## try-catch-finally 구문\n코틀린의 try-catch-finally 구문은 표현식으로 사용될 수 있어, 값을 반환할 수 있다.\n\n## 자바와의 주요 차이점\n코틀린에서는 checked exception을 명시적으로 선언하지 않아도 된다. 이는 편리하지만, 예외 처리에 주의가 필요하다.\n\n## Kotlin과 Spring에서의 @Transactional 사용 시 주의사항\n코틀린에서 CheckedException은 기본적으로 롤백되지 않는다. 자바에서는 컴파일러가 이를 강제하지만, 코틀린에서는 개발자가 직접 관리해야 한다.\n\n자바의 경우\n- 컴파일러가 checked exception을 처리하도록 강제한다.\n- 예외 처리가 명시적으로 이루어진다.\n\n코틀린의 경우\n- 명시적인 예외 선언이 없어 놓칠 수 있다.\n- 예외가 발생해도 롤백되지 않을 수 있다.\n- 중요한 지점에서는 try-catch 블록을 사용하는 것이 좋다.\n\n---\n# 함수 호출의 개선된 방식\n\n## 명명된 매개변수\n코틀린에서는 함수 호출 시 매개변수의 이름을 지정할 수 있어, 코드의 가독성이 향상된다.\n## 기본 매개변수 값\n코틀린 함수는 매개변수에 기본값을 지정할 수 있어, 함수 오버로딩의 필요성을 줄여준다.\n\n## 최상위 함수와 프로퍼티\n코틀린에서는 함수와 변수를 클래스 외부에 선언할 수 있어, 불필요한 유틸리티 클래스를 만들 필요가 없다.\n\n---\n# **확장** **함수**(Extension function)**와** **확장** **프로퍼티**(Extension property)\n\n## 1. 확장 함수 (Extension Function)\n\n기존 클래스에 새로운 메서드를 추가하는 기능\n\n- 장점: 라이브러리 클래스를 쉽게 확장 가능\n- 제한: 오버라이드 불가 (내부적으로 정적 메서드로 구현)\n\n## 2. 확장 프로퍼티 (Extension Property)\n기존 클래스에 새로운 프로퍼티를 추가하는 기능\n\n## 3. 컬렉션의 확장 함수\nSet, List 등 컬렉션에 추가 기능을 제공\n\n## 4. 가변 인자 함수\nvararg 키워드를 사용해 가변적인 개수의 인자를 받는 함수\n\n## 5. 중위 호출 (Infix Function)\n확장 함수이면서 파라미터가 하나인 함수에 사용 가능\n- 주로 mapOf(\"key\" to \"value\")와 같은 형태로 사용\n\n## 6. 구조 분해 선언 (Destructuring Declarations)\nPair, Triple, 또는 데이터 클래스의 속성을 개별 변수로 분해\n\n이러한 기능들은 코드의 가독성을 향상시키고, 더 간결하고 표현력 있는 코드 작성을 가능\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 0beb5236bc46cdfa996236f7140fdedde25e0cf4)
+++ b/README.md	(date 1731313864348)
@@ -187,3 +187,25 @@
 Pair, Triple, 또는 데이터 클래스의 속성을 개별 변수로 분해
 
 이러한 기능들은 코드의 가독성을 향상시키고, 더 간결하고 표현력 있는 코드 작성을 가능
+
+---
+# 코틀린의 클래스, 객체, 인터페이스 활용
+
+## 인터페이스와 구현
+코틀린에서는 인터페이스 구현 시 콜론(:)을 사용합니다. 또한, 메서드 구현 시 'override' 키워드를 반드시 사용해야 합니다.
+
+## 다중 인터페이스 구현
+여러 인터페이스를 동시에 구현할 때, 동일한 이름의 메서드가 존재하면 명시적으로 구현을 제공해야 합니다.
+
+## 변경자: open, final, abstract
+코틀린에서는 기본적으로 모든 클래스와 메서드가 final입니다. 이는 무분별한 상속을 방지하고 코드의 안정성을 높이는 데 도움이 됩니다.
+상속이 필요한 경우, 'open' 키워드를 사용합니다.
+
+## 가시성 변경자
+코틀린의 가시성 변경자는 다음과 같습니다.
+- public (기본값): 어디서나 접근 가능
+- private: 같은 클래스 또는 파일 내에서만 접근 가능
+- protected: 하위 클래스에서만 접근 가능
+- internal: 같은 모듈 내에서만 접근 가능
+
+코틀린은 자바와 달리 기본 가시성이 public이며, 패키지 전용 가시성이 없습니다. 대신 모듈 내부에서만 볼 수 있는 internal 가시성을 제공합니다.
\ No newline at end of file
Index: src/Clickable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Clickable.kt b/src/Clickable.kt
new file mode 100644
--- /dev/null	(date 1731313864344)
+++ b/src/Clickable.kt	(date 1731313864344)
@@ -0,0 +1,43 @@
+interface Clickable {
+    fun click(): Unit
+}
+
+interface Focusable {
+    fun focused()
+    fun hidden()
+}
+
+open class Button {
+
+    fun click(): Unit {
+        println("Button clicked.")
+    }
+}
+
+
+class Input : Button(), Focusable {
+
+    override fun focused() {
+        println("Input Box focused.")
+        internalPrint()
+    }
+
+    override fun hidden() {
+        println("Input Box hidden.")
+    }
+
+    private fun internalPrint(){
+        println("Button internalPrint1")
+    }
+
+}
+private fun internalPrint(){
+    println("Button internalPrint2")
+}
+
+fun main() {
+    Input().click()
+    Input().focused()
+    Input().hidden()
+    internalPrint()
+}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"414d356a-428b-4a15-a9bb-95805667fb3c\" name=\"Changes\" comment=\"# 함수 호출의 개선된 방식&#10;&#10;## 명명된 매개변수&#10;코틀린에서는 함수 호출 시 매개변수의 이름을 지정할 수 있어, 코드의 가독성이 향상된다.&#10;&#10;## 기본 매개변수 값&#10;코틀린 함수는 매개변수에 기본값을 지정할 수 있어, 함수 오버로딩의 필요성을 줄여준다.&#10;&#10;## 최상위 함수와 프로퍼티&#10;코틀린에서는 함수와 변수를 클래스 외부에 선언할 수 있어, 불필요한 유틸리티 클래스를 만들 필요가 없다.\">\n      <change afterPath=\"$PROJECT_DIR$/src/Extentions.kt\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ComposerSettings\">\n    <execution />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Kotlin Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 4\n}</component>\n  <component name=\"ProjectId\" id=\"2oPgX0OKJn8HaqjY6anJye7SDOF\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Kotlin.CalculateKt.executor\": \"Debug\",\n    \"Kotlin.ColorKt.executor\": \"Debug\",\n    \"Kotlin.ExceptionKt.executor\": \"Debug\",\n    \"Kotlin.ExtentionsKt.executor\": \"Debug\",\n    \"Kotlin.FunctionsKt.executor\": \"Debug\",\n    \"Kotlin.IterationKt.executor\": \"Debug\",\n    \"Kotlin.MainKt.executor\": \"Debug\",\n    \"Kotlin.PersonKt.executor\": \"Debug\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"jusun/extension\",\n    \"kotlin-language-version-configured\": \"true\",\n    \"last_opened_file_path\": \"/Users/bagjuseon/Project/Kotlin-JS\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"settings.editor.selected.configurable\": \"org.jetbrains.plugins.github.ui.GithubSettingsConfigurable\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RunManager\" selected=\"Kotlin.ExtentionsKt\">\n    <configuration name=\"ColorKt\" type=\"JetRunConfigurationType\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"ColorKt\" />\n      <module name=\"Kotlin-JS\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ExceptionKt\" type=\"JetRunConfigurationType\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"ExceptionKt\" />\n      <module name=\"Kotlin-JS\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ExtentionsKt\" type=\"JetRunConfigurationType\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"ExtentionsKt\" />\n      <module name=\"Kotlin-JS\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"FunctionsKt\" type=\"JetRunConfigurationType\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"FunctionsKt\" />\n      <module name=\"Kotlin-JS\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"IterationKt\" type=\"JetRunConfigurationType\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"IterationKt\" />\n      <module name=\"Kotlin-JS\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Kotlin.ExtentionsKt\" />\n        <item itemvalue=\"Kotlin.FunctionsKt\" />\n        <item itemvalue=\"Kotlin.ExceptionKt\" />\n        <item itemvalue=\"Kotlin.IterationKt\" />\n        <item itemvalue=\"Kotlin.ColorKt\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.15989.150\" />\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-IU-241.15989.150\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"414d356a-428b-4a15-a9bb-95805667fb3c\" name=\"Changes\" comment=\"\" />\n      <created>1730776663410</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1730776663410</updated>\n      <workItem from=\"1730776664389\" duration=\"5917000\" />\n      <workItem from=\"1730851440869\" duration=\"509000\" />\n      <workItem from=\"1730871739901\" duration=\"2330000\" />\n      <workItem from=\"1730938181331\" duration=\"2922000\" />\n      <workItem from=\"1731035286177\" duration=\"62000\" />\n      <workItem from=\"1731111860630\" duration=\"3304000\" />\n      <workItem from=\"1731311546932\" duration=\"750000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Calculate Create\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730777777254</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730777777254</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"코틀린의 특별한 기능&#10;&#10;- 타입 추론: 변수와 함수의 반환 타입을 자동으로 추론한다.&#10;- 문자열 템플릿: 문자열 내에 변수나 표현식을 쉽게 삽입할 수 있다.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730778673379</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730778673379</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730786425264</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730786425264</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730786592174</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730786592174</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"코틀린의 제어 구조와 표현식 처리&#10;&#10;코틀린은 강력한 제어 구조와 표현식 처리 기능을 제공한다. 특히 'when'과 'enum'은 매우 유용한 기능이다.&#10;&#10;enum 클래스&#10;&#10;enum 클래스는 상수 집합을 정의하는 데 사용한다. 코틀린의 enum은 자바와 유사하지만 더 많은 기능을 제공한다.&#10;&#10;when 표현식&#10;&#10;when은 코틀린의 강력한 제어 구조로, 자바의 switch문을 대체하고 확장한다.&#10;&#10;when은 enum 클래스뿐만 아니라 다양한 타입과 조건에 사용할 수 있다.&#10;&#10;스마트 캐스트&#10;&#10;코틀린의 스마트 캐스트 기능은 타입 검사와 캐스팅을 자동으로 수행한다.&#10;&#10;이러한 기능들을 통해 코틀린은 더 간결하고 안전한 코드 작성을 가능하게 한다.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730872574924</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730872574924</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"스마트캐스트\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730873419022</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730873419022</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"# 코틀린의 반복문&#10;&#10;코틀린의 반복문은 Java와 유사한 구조를 가진다. 특히 while 문은 거의 동일한 형태를 보인다. 코틀린에서는 주로 while, do-while, 그리고 for 문을 사용하여 반복 작업을 수행한다.&#10;&#10;## while과 do-while 반복문&#10;&#10;## for 반복문&#10;&#10;코틀린의 for 문은 범위(range)를 사용하여 반복을 수행한다.&#10;&#10;기본적으로 'i in 1..100'은 양쪽 끝을 포함한다. 마지막 숫자를 제외하려면 'until' 키워드를 사용할 수 있다.&#10;&#10;컬렉션과 맵의 반복&#10;&#10;코틀린에서는 컬렉션과 맵을 쉽게 순회할 수 있다. &#10;'(num, name) in students'는 맵의 키-값 쌍을 분해하여 각각의 변수에 할당하는 구조 분해 선언을 사용한다.&#10;&#10;범위 검사&#10;&#10;코틀린에서는 'in' 키워드를 사용하여 값이 특정 범위 내에 있는지 쉽게 확인할 수 있다.&#10;&#10;이러한 범위 검사는 내부적으로 'a ≤ x ≤ b'와 같은 비교 연산으로 변환된다.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730950372742</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730950372742</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"# 코틀린의 예외 처리&#10;코틀린의 예외 처리는 자바와 유사하지만, 중요한 차이점이 있다.&#10;&#10;## 기본적인 예외 발생&#10;코틀린에서는 자바와 달리 'new' 키워드 없이 예외를 생성할 수 있다.&#10;&#10;## try-catch-finally 구문&#10;코틀린의 try-catch-finally 구문은 표현식으로 사용될 수 있어, 값을 반환할 수 있다.&#10;&#10;## 자바와의 주요 차이점&#10;코틀린에서는 checked exception을 명시적으로 선언하지 않아도 된다. 이는 편리하지만, 예외 처리에 주의가 필요하다.&#10;&#10;## Kotlin과 Spring에서의 @Transactional 사용 시 주의사항&#10;코틀린에서 CheckedException은 기본적으로 롤백되지 않는다. 자바에서는 컴파일러가 이를 강제하지만, 코틀린에서는 개발자가 직접 관리해야 한다.&#10;&#10;자바의 경우&#10;- 컴파일러가 checked exception을 처리하도록 강제한다.&#10;- 예외 처리가 명시적으로 이루어진다.&#10;&#10;코틀린의 경우&#10;- 명시적인 예외 선언이 없어 놓칠 수 있다.&#10;- 예외가 발생해도 롤백되지 않을 수 있다.&#10;- 중요한 지점에서는 try-catch 블록을 사용하는 것이 좋다.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1731114058424</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1731114058424</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"9\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Calculate Create\" />\n    <MESSAGE value=\"코틀린의 특별한 기능&#10;&#10;- 타입 추론: 변수와 함수의 반환 타입을 자동으로 추론한다.&#10;- 문자열 템플릿: 문자열 내에 변수나 표현식을 쉽게 삽입할 수 있다.\" />\n    <MESSAGE value=\"코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다.\" />\n    <MESSAGE value=\"코틀린의 제어 구조와 표현식 처리&#10;&#10;코틀린은 강력한 제어 구조와 표현식 처리 기능을 제공한다. 특히 'when'과 'enum'은 매우 유용한 기능이다.&#10;&#10;enum 클래스&#10;&#10;enum 클래스는 상수 집합을 정의하는 데 사용한다. 코틀린의 enum은 자바와 유사하지만 더 많은 기능을 제공한다.&#10;&#10;when 표현식&#10;&#10;when은 코틀린의 강력한 제어 구조로, 자바의 switch문을 대체하고 확장한다.&#10;&#10;when은 enum 클래스뿐만 아니라 다양한 타입과 조건에 사용할 수 있다.&#10;&#10;스마트 캐스트&#10;&#10;코틀린의 스마트 캐스트 기능은 타입 검사와 캐스팅을 자동으로 수행한다.&#10;&#10;이러한 기능들을 통해 코틀린은 더 간결하고 안전한 코드 작성을 가능하게 한다.\" />\n    <MESSAGE value=\"스마트캐스트\" />\n    <MESSAGE value=\"# 코틀린의 반복문&#10;&#10;코틀린의 반복문은 Java와 유사한 구조를 가진다. 특히 while 문은 거의 동일한 형태를 보인다. 코틀린에서는 주로 while, do-while, 그리고 for 문을 사용하여 반복 작업을 수행한다.&#10;&#10;## while과 do-while 반복문&#10;&#10;## for 반복문&#10;&#10;코틀린의 for 문은 범위(range)를 사용하여 반복을 수행한다.&#10;&#10;기본적으로 'i in 1..100'은 양쪽 끝을 포함한다. 마지막 숫자를 제외하려면 'until' 키워드를 사용할 수 있다.&#10;&#10;컬렉션과 맵의 반복&#10;&#10;코틀린에서는 컬렉션과 맵을 쉽게 순회할 수 있다. &#10;'(num, name) in students'는 맵의 키-값 쌍을 분해하여 각각의 변수에 할당하는 구조 분해 선언을 사용한다.&#10;&#10;범위 검사&#10;&#10;코틀린에서는 'in' 키워드를 사용하여 값이 특정 범위 내에 있는지 쉽게 확인할 수 있다.&#10;&#10;이러한 범위 검사는 내부적으로 'a ≤ x ≤ b'와 같은 비교 연산으로 변환된다.\" />\n    <MESSAGE value=\"# 코틀린의 예외 처리&#10;코틀린의 예외 처리는 자바와 유사하지만, 중요한 차이점이 있다.&#10;&#10;## 기본적인 예외 발생&#10;코틀린에서는 자바와 달리 'new' 키워드 없이 예외를 생성할 수 있다.&#10;&#10;## try-catch-finally 구문&#10;코틀린의 try-catch-finally 구문은 표현식으로 사용될 수 있어, 값을 반환할 수 있다.&#10;&#10;## 자바와의 주요 차이점&#10;코틀린에서는 checked exception을 명시적으로 선언하지 않아도 된다. 이는 편리하지만, 예외 처리에 주의가 필요하다.&#10;&#10;## Kotlin과 Spring에서의 @Transactional 사용 시 주의사항&#10;코틀린에서 CheckedException은 기본적으로 롤백되지 않는다. 자바에서는 컴파일러가 이를 강제하지만, 코틀린에서는 개발자가 직접 관리해야 한다.&#10;&#10;자바의 경우&#10;- 컴파일러가 checked exception을 처리하도록 강제한다.&#10;- 예외 처리가 명시적으로 이루어진다.&#10;&#10;코틀린의 경우&#10;- 명시적인 예외 선언이 없어 놓칠 수 있다.&#10;- 예외가 발생해도 롤백되지 않을 수 있다.&#10;- 중요한 지점에서는 try-catch 블록을 사용하는 것이 좋다.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"# 코틀린의 예외 처리&#10;코틀린의 예외 처리는 자바와 유사하지만, 중요한 차이점이 있다.&#10;&#10;## 기본적인 예외 발생&#10;코틀린에서는 자바와 달리 'new' 키워드 없이 예외를 생성할 수 있다.&#10;&#10;## try-catch-finally 구문&#10;코틀린의 try-catch-finally 구문은 표현식으로 사용될 수 있어, 값을 반환할 수 있다.&#10;&#10;## 자바와의 주요 차이점&#10;코틀린에서는 checked exception을 명시적으로 선언하지 않아도 된다. 이는 편리하지만, 예외 처리에 주의가 필요하다.&#10;&#10;## Kotlin과 Spring에서의 @Transactional 사용 시 주의사항&#10;코틀린에서 CheckedException은 기본적으로 롤백되지 않는다. 자바에서는 컴파일러가 이를 강제하지만, 코틀린에서는 개발자가 직접 관리해야 한다.&#10;&#10;자바의 경우&#10;- 컴파일러가 checked exception을 처리하도록 강제한다.&#10;- 예외 처리가 명시적으로 이루어진다.&#10;&#10;코틀린의 경우&#10;- 명시적인 예외 선언이 없어 놓칠 수 있다.&#10;- 예외가 발생해도 롤백되지 않을 수 있다.&#10;- 중요한 지점에서는 try-catch 블록을 사용하는 것이 좋다.\" />\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0beb5236bc46cdfa996236f7140fdedde25e0cf4)
+++ b/.idea/workspace.xml	(date 1731313514996)
@@ -4,8 +4,8 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="414d356a-428b-4a15-a9bb-95805667fb3c" name="Changes" comment="# 함수 호출의 개선된 방식&#10;&#10;## 명명된 매개변수&#10;코틀린에서는 함수 호출 시 매개변수의 이름을 지정할 수 있어, 코드의 가독성이 향상된다.&#10;&#10;## 기본 매개변수 값&#10;코틀린 함수는 매개변수에 기본값을 지정할 수 있어, 함수 오버로딩의 필요성을 줄여준다.&#10;&#10;## 최상위 함수와 프로퍼티&#10;코틀린에서는 함수와 변수를 클래스 외부에 선언할 수 있어, 불필요한 유틸리티 클래스를 만들 필요가 없다.">
-      <change afterPath="$PROJECT_DIR$/src/Extentions.kt" afterDir="false" />
+    <list default="true" id="414d356a-428b-4a15-a9bb-95805667fb3c" name="Changes" comment="확장 함수(Extension function)와 확장 프로퍼티(Extension property)&#10;&#10;- 확장 함수와 확장 프로퍼티: 기존 클래스에 새로운 기능을 추가할 수 있는 방법입니다.&#10;- 가변 인자 함수: 'vararg' 키워드를 사용하여 여러 개의 인자를 받을 수 있는 함수입니다.&#10;- 중위 호출(Infix function): 특정 조건에서 함수를 더 읽기 쉽게 호출할 수 있는 방식입니다.&#10;- 구조 분해 선언(Destructuring declarations): Pair나 Triple 등의 복합 객체에서 여러 변수를 한 번에 초기화할 수 있는 기능입니다.">
+      <change afterPath="$PROJECT_DIR$/src/Clickable.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -43,6 +43,7 @@
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "Kotlin.CalculateKt.executor": "Debug",
+    "Kotlin.ClickableKt.executor": "Debug",
     "Kotlin.ColorKt.executor": "Debug",
     "Kotlin.ExceptionKt.executor": "Debug",
     "Kotlin.ExtentionsKt.executor": "Debug",
@@ -63,9 +64,9 @@
     "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
-  <component name="RunManager" selected="Kotlin.ExtentionsKt">
-    <configuration name="ColorKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="ColorKt" />
+  <component name="RunManager" selected="Kotlin.ClickableKt">
+    <configuration name="ClickableKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="ClickableKt" />
       <module name="Kotlin-JS" />
       <method v="2">
         <option name="Make" enabled="true" />
@@ -101,11 +102,11 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Kotlin.ClickableKt" />
         <item itemvalue="Kotlin.ExtentionsKt" />
         <item itemvalue="Kotlin.FunctionsKt" />
         <item itemvalue="Kotlin.ExceptionKt" />
         <item itemvalue="Kotlin.IterationKt" />
-        <item itemvalue="Kotlin.ColorKt" />
       </list>
     </recent_temporary>
   </component>
@@ -131,7 +132,7 @@
       <workItem from="1730938181331" duration="2922000" />
       <workItem from="1731035286177" duration="62000" />
       <workItem from="1731111860630" duration="3304000" />
-      <workItem from="1731311546932" duration="750000" />
+      <workItem from="1731311546932" duration="1741000" />
     </task>
     <task id="LOCAL-00001" summary="Calculate Create">
       <option name="closed" value="true" />
@@ -197,7 +198,15 @@
       <option name="project" value="LOCAL" />
       <updated>1731114058424</updated>
     </task>
-    <option name="localTasksCounter" value="9" />
+    <task id="LOCAL-00009" summary="확장 함수(Extension function)와 확장 프로퍼티(Extension property)&#10;&#10;- 확장 함수와 확장 프로퍼티: 기존 클래스에 새로운 기능을 추가할 수 있는 방법입니다.&#10;- 가변 인자 함수: 'vararg' 키워드를 사용하여 여러 개의 인자를 받을 수 있는 함수입니다.&#10;- 중위 호출(Infix function): 특정 조건에서 함수를 더 읽기 쉽게 호출할 수 있는 방식입니다.&#10;- 구조 분해 선언(Destructuring declarations): Pair나 Triple 등의 복합 객체에서 여러 변수를 한 번에 초기화할 수 있는 기능입니다.">
+      <option name="closed" value="true" />
+      <created>1731312702416</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1731312702416</updated>
+    </task>
+    <option name="localTasksCounter" value="10" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -222,7 +231,8 @@
     <MESSAGE value="스마트캐스트" />
     <MESSAGE value="# 코틀린의 반복문&#10;&#10;코틀린의 반복문은 Java와 유사한 구조를 가진다. 특히 while 문은 거의 동일한 형태를 보인다. 코틀린에서는 주로 while, do-while, 그리고 for 문을 사용하여 반복 작업을 수행한다.&#10;&#10;## while과 do-while 반복문&#10;&#10;## for 반복문&#10;&#10;코틀린의 for 문은 범위(range)를 사용하여 반복을 수행한다.&#10;&#10;기본적으로 'i in 1..100'은 양쪽 끝을 포함한다. 마지막 숫자를 제외하려면 'until' 키워드를 사용할 수 있다.&#10;&#10;컬렉션과 맵의 반복&#10;&#10;코틀린에서는 컬렉션과 맵을 쉽게 순회할 수 있다. &#10;'(num, name) in students'는 맵의 키-값 쌍을 분해하여 각각의 변수에 할당하는 구조 분해 선언을 사용한다.&#10;&#10;범위 검사&#10;&#10;코틀린에서는 'in' 키워드를 사용하여 값이 특정 범위 내에 있는지 쉽게 확인할 수 있다.&#10;&#10;이러한 범위 검사는 내부적으로 'a ≤ x ≤ b'와 같은 비교 연산으로 변환된다." />
     <MESSAGE value="# 코틀린의 예외 처리&#10;코틀린의 예외 처리는 자바와 유사하지만, 중요한 차이점이 있다.&#10;&#10;## 기본적인 예외 발생&#10;코틀린에서는 자바와 달리 'new' 키워드 없이 예외를 생성할 수 있다.&#10;&#10;## try-catch-finally 구문&#10;코틀린의 try-catch-finally 구문은 표현식으로 사용될 수 있어, 값을 반환할 수 있다.&#10;&#10;## 자바와의 주요 차이점&#10;코틀린에서는 checked exception을 명시적으로 선언하지 않아도 된다. 이는 편리하지만, 예외 처리에 주의가 필요하다.&#10;&#10;## Kotlin과 Spring에서의 @Transactional 사용 시 주의사항&#10;코틀린에서 CheckedException은 기본적으로 롤백되지 않는다. 자바에서는 컴파일러가 이를 강제하지만, 코틀린에서는 개발자가 직접 관리해야 한다.&#10;&#10;자바의 경우&#10;- 컴파일러가 checked exception을 처리하도록 강제한다.&#10;- 예외 처리가 명시적으로 이루어진다.&#10;&#10;코틀린의 경우&#10;- 명시적인 예외 선언이 없어 놓칠 수 있다.&#10;- 예외가 발생해도 롤백되지 않을 수 있다.&#10;- 중요한 지점에서는 try-catch 블록을 사용하는 것이 좋다." />
-    <option name="LAST_COMMIT_MESSAGE" value="# 코틀린의 예외 처리&#10;코틀린의 예외 처리는 자바와 유사하지만, 중요한 차이점이 있다.&#10;&#10;## 기본적인 예외 발생&#10;코틀린에서는 자바와 달리 'new' 키워드 없이 예외를 생성할 수 있다.&#10;&#10;## try-catch-finally 구문&#10;코틀린의 try-catch-finally 구문은 표현식으로 사용될 수 있어, 값을 반환할 수 있다.&#10;&#10;## 자바와의 주요 차이점&#10;코틀린에서는 checked exception을 명시적으로 선언하지 않아도 된다. 이는 편리하지만, 예외 처리에 주의가 필요하다.&#10;&#10;## Kotlin과 Spring에서의 @Transactional 사용 시 주의사항&#10;코틀린에서 CheckedException은 기본적으로 롤백되지 않는다. 자바에서는 컴파일러가 이를 강제하지만, 코틀린에서는 개발자가 직접 관리해야 한다.&#10;&#10;자바의 경우&#10;- 컴파일러가 checked exception을 처리하도록 강제한다.&#10;- 예외 처리가 명시적으로 이루어진다.&#10;&#10;코틀린의 경우&#10;- 명시적인 예외 선언이 없어 놓칠 수 있다.&#10;- 예외가 발생해도 롤백되지 않을 수 있다.&#10;- 중요한 지점에서는 try-catch 블록을 사용하는 것이 좋다." />
+    <MESSAGE value="확장 함수(Extension function)와 확장 프로퍼티(Extension property)&#10;&#10;- 확장 함수와 확장 프로퍼티: 기존 클래스에 새로운 기능을 추가할 수 있는 방법입니다.&#10;- 가변 인자 함수: 'vararg' 키워드를 사용하여 여러 개의 인자를 받을 수 있는 함수입니다.&#10;- 중위 호출(Infix function): 특정 조건에서 함수를 더 읽기 쉽게 호출할 수 있는 방식입니다.&#10;- 구조 분해 선언(Destructuring declarations): Pair나 Triple 등의 복합 객체에서 여러 변수를 한 번에 초기화할 수 있는 기능입니다." />
+    <option name="LAST_COMMIT_MESSAGE" value="확장 함수(Extension function)와 확장 프로퍼티(Extension property)&#10;&#10;- 확장 함수와 확장 프로퍼티: 기존 클래스에 새로운 기능을 추가할 수 있는 방법입니다.&#10;- 가변 인자 함수: 'vararg' 키워드를 사용하여 여러 개의 인자를 받을 수 있는 함수입니다.&#10;- 중위 호출(Infix function): 특정 조건에서 함수를 더 읽기 쉽게 호출할 수 있는 방식입니다.&#10;- 구조 분해 선언(Destructuring declarations): Pair나 Triple 등의 복합 객체에서 여러 변수를 한 번에 초기화할 수 있는 기능입니다." />
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
