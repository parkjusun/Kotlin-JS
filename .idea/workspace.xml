<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ComposerSettings">
    <execution />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Kotlin Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2oPgX0OKJn8HaqjY6anJye7SDOF" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Kotlin.CalculateKt.executor&quot;: &quot;Debug&quot;,
    &quot;Kotlin.ColorKt.executor&quot;: &quot;Debug&quot;,
    &quot;Kotlin.ExceptionKt.executor&quot;: &quot;Debug&quot;,
    &quot;Kotlin.ExtentionsKt.executor&quot;: &quot;Debug&quot;,
    &quot;Kotlin.FunctionsKt.executor&quot;: &quot;Debug&quot;,
    &quot;Kotlin.IterationKt.executor&quot;: &quot;Debug&quot;,
    &quot;Kotlin.MainKt.executor&quot;: &quot;Debug&quot;,
    &quot;Kotlin.PersonKt.executor&quot;: &quot;Debug&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;jusun/extension&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/bagjuseon/Project/Kotlin-JS&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;org.jetbrains.plugins.github.ui.GithubSettingsConfigurable&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RunManager" selected="Kotlin.SealedClassKt">
    <configuration name="ExceptionKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ExceptionKt" />
      <module name="Kotlin-JS" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ExtentionsKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ExtentionsKt" />
      <module name="Kotlin-JS" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="FunctionsKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="FunctionsKt" />
      <module name="Kotlin-JS" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="IterationKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="IterationKt" />
      <module name="Kotlin-JS" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SealedClassKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="SealedClassKt" />
      <module name="Kotlin-JS" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Kotlin.SealedClassKt" />
        <item itemvalue="Kotlin.ExtentionsKt" />
        <item itemvalue="Kotlin.FunctionsKt" />
        <item itemvalue="Kotlin.ExceptionKt" />
        <item itemvalue="Kotlin.IterationKt" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.15989.150" />
        <option value="bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-IU-241.15989.150" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="414d356a-428b-4a15-a9bb-95805667fb3c" name="Changes" comment="" />
      <created>1730776663410</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1730776663410</updated>
      <workItem from="1730776664389" duration="5917000" />
      <workItem from="1730851440869" duration="509000" />
      <workItem from="1730871739901" duration="2330000" />
      <workItem from="1730938181331" duration="2922000" />
      <workItem from="1731035286177" duration="62000" />
      <workItem from="1731111860630" duration="3304000" />
      <workItem from="1731311546932" duration="750000" />
    </task>
    <task id="LOCAL-00001" summary="Calculate Create">
      <option name="closed" value="true" />
      <created>1730777777254</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1730777777254</updated>
    </task>
    <task id="LOCAL-00002" summary="코틀린의 특별한 기능&#10;&#10;- 타입 추론: 변수와 함수의 반환 타입을 자동으로 추론한다.&#10;- 문자열 템플릿: 문자열 내에 변수나 표현식을 쉽게 삽입할 수 있다.">
      <option name="closed" value="true" />
      <created>1730778673379</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1730778673379</updated>
    </task>
    <task id="LOCAL-00003" summary="코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다.">
      <option name="closed" value="true" />
      <created>1730786425264</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1730786425264</updated>
    </task>
    <task id="LOCAL-00004" summary="코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다.">
      <option name="closed" value="true" />
      <created>1730786592174</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1730786592174</updated>
    </task>
    <task id="LOCAL-00005" summary="코틀린의 제어 구조와 표현식 처리&#10;&#10;코틀린은 강력한 제어 구조와 표현식 처리 기능을 제공한다. 특히 'when'과 'enum'은 매우 유용한 기능이다.&#10;&#10;enum 클래스&#10;&#10;enum 클래스는 상수 집합을 정의하는 데 사용한다. 코틀린의 enum은 자바와 유사하지만 더 많은 기능을 제공한다.&#10;&#10;when 표현식&#10;&#10;when은 코틀린의 강력한 제어 구조로, 자바의 switch문을 대체하고 확장한다.&#10;&#10;when은 enum 클래스뿐만 아니라 다양한 타입과 조건에 사용할 수 있다.&#10;&#10;스마트 캐스트&#10;&#10;코틀린의 스마트 캐스트 기능은 타입 검사와 캐스팅을 자동으로 수행한다.&#10;&#10;이러한 기능들을 통해 코틀린은 더 간결하고 안전한 코드 작성을 가능하게 한다.">
      <option name="closed" value="true" />
      <created>1730872574924</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1730872574924</updated>
    </task>
    <task id="LOCAL-00006" summary="스마트캐스트">
      <option name="closed" value="true" />
      <created>1730873419022</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1730873419022</updated>
    </task>
    <task id="LOCAL-00007" summary="# 코틀린의 반복문&#10;&#10;코틀린의 반복문은 Java와 유사한 구조를 가진다. 특히 while 문은 거의 동일한 형태를 보인다. 코틀린에서는 주로 while, do-while, 그리고 for 문을 사용하여 반복 작업을 수행한다.&#10;&#10;## while과 do-while 반복문&#10;&#10;## for 반복문&#10;&#10;코틀린의 for 문은 범위(range)를 사용하여 반복을 수행한다.&#10;&#10;기본적으로 'i in 1..100'은 양쪽 끝을 포함한다. 마지막 숫자를 제외하려면 'until' 키워드를 사용할 수 있다.&#10;&#10;컬렉션과 맵의 반복&#10;&#10;코틀린에서는 컬렉션과 맵을 쉽게 순회할 수 있다. &#10;'(num, name) in students'는 맵의 키-값 쌍을 분해하여 각각의 변수에 할당하는 구조 분해 선언을 사용한다.&#10;&#10;범위 검사&#10;&#10;코틀린에서는 'in' 키워드를 사용하여 값이 특정 범위 내에 있는지 쉽게 확인할 수 있다.&#10;&#10;이러한 범위 검사는 내부적으로 'a ≤ x ≤ b'와 같은 비교 연산으로 변환된다.">
      <option name="closed" value="true" />
      <created>1730950372742</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1730950372742</updated>
    </task>
    <task id="LOCAL-00008" summary="# 코틀린의 예외 처리&#10;코틀린의 예외 처리는 자바와 유사하지만, 중요한 차이점이 있다.&#10;&#10;## 기본적인 예외 발생&#10;코틀린에서는 자바와 달리 'new' 키워드 없이 예외를 생성할 수 있다.&#10;&#10;## try-catch-finally 구문&#10;코틀린의 try-catch-finally 구문은 표현식으로 사용될 수 있어, 값을 반환할 수 있다.&#10;&#10;## 자바와의 주요 차이점&#10;코틀린에서는 checked exception을 명시적으로 선언하지 않아도 된다. 이는 편리하지만, 예외 처리에 주의가 필요하다.&#10;&#10;## Kotlin과 Spring에서의 @Transactional 사용 시 주의사항&#10;코틀린에서 CheckedException은 기본적으로 롤백되지 않는다. 자바에서는 컴파일러가 이를 강제하지만, 코틀린에서는 개발자가 직접 관리해야 한다.&#10;&#10;자바의 경우&#10;- 컴파일러가 checked exception을 처리하도록 강제한다.&#10;- 예외 처리가 명시적으로 이루어진다.&#10;&#10;코틀린의 경우&#10;- 명시적인 예외 선언이 없어 놓칠 수 있다.&#10;- 예외가 발생해도 롤백되지 않을 수 있다.&#10;- 중요한 지점에서는 try-catch 블록을 사용하는 것이 좋다.">
      <option name="closed" value="true" />
      <created>1731114058424</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1731114058424</updated>
    </task>
    <option name="localTasksCounter" value="9" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Calculate Create" />
    <MESSAGE value="코틀린의 특별한 기능&#10;&#10;- 타입 추론: 변수와 함수의 반환 타입을 자동으로 추론한다.&#10;- 문자열 템플릿: 문자열 내에 변수나 표현식을 쉽게 삽입할 수 있다." />
    <MESSAGE value="코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다." />
    <MESSAGE value="코틀린의 제어 구조와 표현식 처리&#10;&#10;코틀린은 강력한 제어 구조와 표현식 처리 기능을 제공한다. 특히 'when'과 'enum'은 매우 유용한 기능이다.&#10;&#10;enum 클래스&#10;&#10;enum 클래스는 상수 집합을 정의하는 데 사용한다. 코틀린의 enum은 자바와 유사하지만 더 많은 기능을 제공한다.&#10;&#10;when 표현식&#10;&#10;when은 코틀린의 강력한 제어 구조로, 자바의 switch문을 대체하고 확장한다.&#10;&#10;when은 enum 클래스뿐만 아니라 다양한 타입과 조건에 사용할 수 있다.&#10;&#10;스마트 캐스트&#10;&#10;코틀린의 스마트 캐스트 기능은 타입 검사와 캐스팅을 자동으로 수행한다.&#10;&#10;이러한 기능들을 통해 코틀린은 더 간결하고 안전한 코드 작성을 가능하게 한다." />
    <MESSAGE value="스마트캐스트" />
    <MESSAGE value="# 코틀린의 반복문&#10;&#10;코틀린의 반복문은 Java와 유사한 구조를 가진다. 특히 while 문은 거의 동일한 형태를 보인다. 코틀린에서는 주로 while, do-while, 그리고 for 문을 사용하여 반복 작업을 수행한다.&#10;&#10;## while과 do-while 반복문&#10;&#10;## for 반복문&#10;&#10;코틀린의 for 문은 범위(range)를 사용하여 반복을 수행한다.&#10;&#10;기본적으로 'i in 1..100'은 양쪽 끝을 포함한다. 마지막 숫자를 제외하려면 'until' 키워드를 사용할 수 있다.&#10;&#10;컬렉션과 맵의 반복&#10;&#10;코틀린에서는 컬렉션과 맵을 쉽게 순회할 수 있다. &#10;'(num, name) in students'는 맵의 키-값 쌍을 분해하여 각각의 변수에 할당하는 구조 분해 선언을 사용한다.&#10;&#10;범위 검사&#10;&#10;코틀린에서는 'in' 키워드를 사용하여 값이 특정 범위 내에 있는지 쉽게 확인할 수 있다.&#10;&#10;이러한 범위 검사는 내부적으로 'a ≤ x ≤ b'와 같은 비교 연산으로 변환된다." />
    <MESSAGE value="# 코틀린의 예외 처리&#10;코틀린의 예외 처리는 자바와 유사하지만, 중요한 차이점이 있다.&#10;&#10;## 기본적인 예외 발생&#10;코틀린에서는 자바와 달리 'new' 키워드 없이 예외를 생성할 수 있다.&#10;&#10;## try-catch-finally 구문&#10;코틀린의 try-catch-finally 구문은 표현식으로 사용될 수 있어, 값을 반환할 수 있다.&#10;&#10;## 자바와의 주요 차이점&#10;코틀린에서는 checked exception을 명시적으로 선언하지 않아도 된다. 이는 편리하지만, 예외 처리에 주의가 필요하다.&#10;&#10;## Kotlin과 Spring에서의 @Transactional 사용 시 주의사항&#10;코틀린에서 CheckedException은 기본적으로 롤백되지 않는다. 자바에서는 컴파일러가 이를 강제하지만, 코틀린에서는 개발자가 직접 관리해야 한다.&#10;&#10;자바의 경우&#10;- 컴파일러가 checked exception을 처리하도록 강제한다.&#10;- 예외 처리가 명시적으로 이루어진다.&#10;&#10;코틀린의 경우&#10;- 명시적인 예외 선언이 없어 놓칠 수 있다.&#10;- 예외가 발생해도 롤백되지 않을 수 있다.&#10;- 중요한 지점에서는 try-catch 블록을 사용하는 것이 좋다." />
    <option name="LAST_COMMIT_MESSAGE" value="# 코틀린의 예외 처리&#10;코틀린의 예외 처리는 자바와 유사하지만, 중요한 차이점이 있다.&#10;&#10;## 기본적인 예외 발생&#10;코틀린에서는 자바와 달리 'new' 키워드 없이 예외를 생성할 수 있다.&#10;&#10;## try-catch-finally 구문&#10;코틀린의 try-catch-finally 구문은 표현식으로 사용될 수 있어, 값을 반환할 수 있다.&#10;&#10;## 자바와의 주요 차이점&#10;코틀린에서는 checked exception을 명시적으로 선언하지 않아도 된다. 이는 편리하지만, 예외 처리에 주의가 필요하다.&#10;&#10;## Kotlin과 Spring에서의 @Transactional 사용 시 주의사항&#10;코틀린에서 CheckedException은 기본적으로 롤백되지 않는다. 자바에서는 컴파일러가 이를 강제하지만, 코틀린에서는 개발자가 직접 관리해야 한다.&#10;&#10;자바의 경우&#10;- 컴파일러가 checked exception을 처리하도록 강제한다.&#10;- 예외 처리가 명시적으로 이루어진다.&#10;&#10;코틀린의 경우&#10;- 명시적인 예외 선언이 없어 놓칠 수 있다.&#10;- 예외가 발생해도 롤백되지 않을 수 있다.&#10;- 중요한 지점에서는 try-catch 블록을 사용하는 것이 좋다." />
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>