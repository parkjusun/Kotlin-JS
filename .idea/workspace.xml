<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="414d356a-428b-4a15-a9bb-95805667fb3c" name="Changes" comment="코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다." />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ComposerSettings">
    <execution />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Kotlin Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo"><![CDATA[{
  "associatedIndex": 4
}]]></component>
  <component name="ProjectId" id="2oPgX0OKJn8HaqjY6anJye7SDOF" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Kotlin.CalculateKt.executor": "Debug",
    "Kotlin.MainKt.executor": "Debug",
    "Kotlin.PersonKt.executor": "Debug",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "git-widget-placeholder": "master",
    "kotlin-language-version-configured": "true",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "org.jetbrains.plugins.github.ui.GithubSettingsConfigurable",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RunManager" selected="Kotlin.PersonKt">
    <configuration name="CalculateKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="CalculateKt" />
      <module name="Kotlin-JS" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="PersonKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="PersonKt" />
      <module name="Kotlin-JS" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Kotlin.PersonKt" />
        <item itemvalue="Kotlin.CalculateKt" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.15989.150" />
        <option value="bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-IU-241.15989.150" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="414d356a-428b-4a15-a9bb-95805667fb3c" name="Changes" comment="" />
      <created>1730776663410</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1730776663410</updated>
      <workItem from="1730776664389" duration="5263000" />
    </task>
    <task id="LOCAL-00001" summary="Calculate Create">
      <option name="closed" value="true" />
      <created>1730777777254</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1730777777254</updated>
    </task>
    <task id="LOCAL-00002" summary="코틀린의 특별한 기능&#10;&#10;- 타입 추론: 변수와 함수의 반환 타입을 자동으로 추론한다.&#10;- 문자열 템플릿: 문자열 내에 변수나 표현식을 쉽게 삽입할 수 있다.">
      <option name="closed" value="true" />
      <created>1730778673379</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1730778673379</updated>
    </task>
    <task id="LOCAL-00003" summary="코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다.">
      <option name="closed" value="true" />
      <created>1730786425264</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1730786425264</updated>
    </task>
    <option name="localTasksCounter" value="4" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Calculate Create" />
    <MESSAGE value="코틀린의 특별한 기능&#10;&#10;- 타입 추론: 변수와 함수의 반환 타입을 자동으로 추론한다.&#10;- 문자열 템플릿: 문자열 내에 변수나 표현식을 쉽게 삽입할 수 있다." />
    <MESSAGE value="코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다." />
    <option name="LAST_COMMIT_MESSAGE" value="코틀린의 클래스와 객체&#10;코틀린에서는 클래스와 객체를 더욱 간결하고 효율적으로 정의한다. 이는 자바와 비교했을 때 큰 장점 중 하나이다.&#10;&#10;1. 클래스 정의의 간소화&#10;코틀린에서는 클래스를 정의할 때 생성자와 프로퍼티를 한 줄로 선언한다. 이는 자바에서 필요한 여러 줄의 코드를 대체한다.&#10;2. 프로퍼티 접근자&#10;코틀린은 기본적으로 getter와 setter를 자동으로 생성한다. 필요한 경우 커스텀 접근자를 정의할 수 있다.&#10;3. 패키지와 임포트&#10;코틀린의 패키지 선언과 임포트 문은 자바와 유사하지만, 최상위 함수의 임포트가 가능하다.&#10;4. 파일 구조의 유연성&#10;코틀린에서는 하나의 파일에 여러 클래스, 함수, 최상위 변수를 선언할 수 있어 관련 코드를 함께 관리하기 용이하다.&#10;이러한 특징들로 인해 코틀린은 더 간결하고 표현력 있는 코드 작성을 가능하게 한다." />
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>